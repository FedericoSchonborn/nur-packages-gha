name: Build and Populate Cache
run-name: Build and Populate Cache (${{ inputs.branch || 'main' }})

on:
  push:
  pull_request:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:
    inputs:
      branch:
        description: Branch
        required: true
        type: string
        default: main

jobs:
  matrix:
    name: Matrix
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        run: |
          git clone --depth 1 --branch ${{ inputs.branch || 'main' }} https://codeberg.org/FedericoSchonborn/nur-packages.git $GITHUB_WORKSPACE

      - name: Install Lix
        run: |
          curl --proto '=https' --tlsv1.2 -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm --extra-conf <<EOF
            trusted-users = root runner
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
          EOF

      - name: Generate Matrix
        id: matrix
        run: |
          set -euo pipefail
          matrix="$(nix eval --json ".#githubActionsMatrix")"
          echo "matrix=$matrix" | tee -a "$GITHUB_OUTPUT"

  build:
    name: ${{ matrix.channel }}/${{ matrix.system }}
    needs: matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout
        run: |
          git clone --depth 1 --branch ${{ inputs.branch || 'main' }} https://codeberg.org/FedericoSchonborn/nur-packages.git $GITHUB_WORKSPACE

      - name: Install QEMU
        if: ${{ matrix.qemu == true }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.qemu-platform }}

      - name: Install Lix
        run: |
          curl --proto '=https' --tlsv1.2 -sSf -L https://install.lix.systems/lix | sh -s -- install --no-confirm --extra-conf $(cat <<EOF
            nix-path: nixpkgs=${{ matrix.channel-url }}
            trusted-users = root runner
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            extra-platforms = ${{ matrix.system }}
          EOF)

      - name: Set up Cachix
        uses: cachix/cachix-action@v16
        with:
          name: ${{ vars.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Show Nixpkgs version
        run: |
          nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'

      - name: Check evaluation
        run: |
          nix-env -f . -qa \* --meta --json \
            --option restrict-eval true \
            --option allow-import-from-derivation true \
            --drv-path --show-trace \
            -I "nixpkgs=$(nix-instantiate --find-file nixpkgs)" \
            -I "$PWD"

      - name: Build Nix packages
        continue-on-error: ${{ matrix.continue-on-error }}
        run: nix shell -f '<nixpkgs>' nix-build-uncached -c nix-build-uncached ci.nix -A cacheOutputs --system ${{ matrix.system }} -build-flags "--show-trace --print-build-logs --keep-going --keep-failed"
